{"comment": [{"Comment": ["#", "Extended", "Euclid"], "Function": ["def", "extended_euclid(a:", "int,", "b:", "int)", "->", "Tuple[int,", "int]:"]}, {"Comment": ["#", "Uses", "ExtendedEuclid", "to", "find", "inverses"], "Function": ["def", "chinese_remainder_theorem(n1:", "int,", "r1:", "int,", "n2:", "int,", "r2:", "int)", "->", "int:"]}, {"Comment": ["#", "This", "function", "find", "the", "inverses", "of", "a", "i.e.,", "a^(-1)"], "Function": ["def", "invert_modulo(a:", "int,", "n:", "int)", "->", "int:"]}, {"Comment": ["#", "Same", "a", "above", "using", "InvertingModulo"], "Function": ["def", "chinese_remainder_theorem2(n1:", "int,", "r1:", "int,", "n2:", "int,", "r2:", "int)", "->", "int:"]}, {"Comment": ["#", "add", "function"], "Function": ["def", "add(x,y):"]}, {"Comment": ["#", "add", "function"], "Function": ["def", "add(x,y):"]}, {"Comment": ["#", "add", "function"], "Function": ["def", "add(x,y)"]}, {"Comment": ["#", "equal", "to", "the", "length", "of", "original", "text"], "Function": ["def", "generate_key(message:", "str,", "key:", "str)", "->", "str:"]}, {"Comment": ["#", "generated", "with", "the", "help", "of", "the", "key"], "Function": ["def", "cipher_text(message:", "str,", "key_new:", "str)", "->", "str:"]}, {"Comment": ["#", "and", "returns", "the", "original", "text"], "Function": ["def", "original_text(cipher_text:", "str,", "key_new:", "str)", "->", "str:"]}, {"Comment": ["#", "Current", "minimum", "recommendation", "is", "2048", "bit", "(group", "14)"], "Function": ["def", "__init__(self,", "group:", "int", "=", "14)", "->", "None:"]}, {"Comment": ["#", "and", "it", "seems", "to", "run", "nicely!"], "Function": ["def", "primitive_root(p_val:", "int)", "->", "int:"]}, {"Comment": ["#", "query", "with", "O(lg", "n)"], "Function": ["def", "query("]}, {"Comment": ["#", "returns", "lca", "of", "node", "u,v"], "Function": ["def", "lowest_common_ancestor("]}, {"Comment": ["#", "runs", "a", "breadth", "first", "search", "from", "root", "node", "of", "the", "tree"], "Function": ["def", "breadth_first_search("]}, {"Comment": ["#", "this", "is", "min-heapify", "method"], "Function": ["def", "sift_down(self,", "idx,", "array):"]}, {"Comment": ["#", "Used", "to", "change", "the", "data", "of", "a", "particular", "node"], "Function": ["def", "__setitem__(self,", "index,", "data):"]}, {"Comment": ["#", "adding", "nodes"], "Function": ["def", "push(self,", "new_data:", "Any):"]}, {"Comment": ["#", "swapping", "nodes"], "Function": ["def", "swap_nodes(self,", "node_data_1,", "node_data_2):"]}, {"Comment": ["#", "A", "utility", "function", "to", "print", "elements", "of", "array"], "Function": ["def", "printArray(arr,", "n):"]}, {"Comment": ["#", "for", "calculating", "u", "value"], "Function": ["def", "ucal(u:", "float,", "p:", "int)", "->", "float:"]}, {"Comment": ["#", "function", "is", "the", "f(x)", "and", "derivative", "is", "the", "f'(x)"], "Function": ["def", "newton("]}, {"Comment": ["#", "Test:", "convert_to_negative()"], "Function": ["def", "test_convert_to_negative():"]}, {"Comment": ["#", "Test:", "change_contrast()"], "Function": ["def", "test_change_contrast():"]}, {"Comment": ["#", "canny.gen_gaussian_kernel()"], "Function": ["def", "test_gen_gaussian_kernel():"]}, {"Comment": ["#", "canny.py"], "Function": ["def", "test_canny():"]}, {"Comment": ["#", "filters/gaussian_filter.py"], "Function": ["def", "test_gen_gaussian_kernel_filter():"]}, {"Comment": ["#", "returns", "(F(n),", "F(n-1))"], "Function": ["def", "_fib(n:", "int)", "->", "tuple[int,", "int]:"]}, {"Comment": ["#", "Print", "order", "of", "matrix", "with", "Ai", "as", "Matrix"], "Function": ["def", "PrintOptimalSolution(OptimalSolution,", "i,", "j):"]}, {"Comment": ["#", "Random", "population", "created", "now", "it's", "time", "to", "evaluate"], "Function": ["def", "evaluate(item:", "str,", "main_target:", "str", "=", "target)", "->", "tuple[str,", "float]:"]}, {"Comment": ["#", "Select,", "Crossover", "and", "Mutate", "a", "new", "population"], "Function": ["def", "select(parent_1:", "tuple[str,", "float])", "->", "list[str]:"]}, {"Comment": ["#", "Finding", "Articulation", "Points", "in", "Undirected", "Graph"], "Function": ["def", "computeAP(l):", "#", "noqa:", "E741"]}, {"Comment": ["#", "function", "to", "search", "the", "path"], "Function": ["def", "search(grid,", "init,", "goal,", "cost,", "heuristic):"]}, {"Comment": ["#", "find", "the", "isolated", "node", "in", "the", "graph"], "Function": ["def", "find_isolated_nodes(graph):"]}, {"Comment": ["#", "vertices", "of", "same", "set."], "Function": ["def", "checkBipartite(graph):"]}, {"Comment": ["#", "vertices", "of", "same", "set."], "Function": ["def", "check_bipartite_dfs(graph):"]}, {"Comment": ["#", "for", "printing", "the", "Graph", "vertices"], "Function": ["def", "print_graph(self)", "->", "None:"]}, {"Comment": ["#", "for", "adding", "the", "edge", "between", "two", "vertices"], "Function": ["def", "add_edge(self,", "from_vertex:", "int,", "to_vertex:", "int)", "->", "None:"]}, {"Comment": ["#", "Based", "on", "Min", "Heap"], "Function": ["def", "__init__(self):"]}, {"Comment": ["#", "This", "is", "a", "sample", "depth", "first", "search", "to", "be", "used", "at", "max_flow"], "Function": ["def", "depth_first_search(self,", "vertex,", "sink,", "flow):"]}, {"Comment": ["#", "Here", "we", "calculate", "the", "flow", "that", "reaches", "the", "sink"], "Function": ["def", "max_flow(self,", "source,", "sink):"]}, {"Comment": ["#", "handles", "repetition"], "Function": ["def", "add_pair(self,", "u,", "v,", "w=1):"]}, {"Comment": ["#", "handles", "if", "the", "input", "does", "not", "exist"], "Function": ["def", "remove_pair(self,", "u,", "v):"]}, {"Comment": ["#", "if", "no", "destination", "is", "meant", "the", "default", "value", "is", "-1"], "Function": ["def", "dfs(self,", "s=-2,", "d=-1):"]}, {"Comment": ["#", "the", "count", "will", "be", "random", "from", "10", "to", "10000"], "Function": ["def", "fill_graph_randomly(self,", "c=-1):"]}, {"Comment": ["#", "handles", "repetition"], "Function": ["def", "add_pair(self,", "u,", "v,", "w=1):"]}, {"Comment": ["#", "handles", "if", "the", "input", "does", "not", "exist"], "Function": ["def", "remove_pair(self,", "u,", "v):"]}, {"Comment": ["#", "if", "no", "destination", "is", "meant", "the", "default", "value", "is", "-1"], "Function": ["def", "dfs(self,", "s=-2,", "d=-1):"]}, {"Comment": ["#", "the", "count", "will", "be", "random", "from", "10", "to", "10000"], "Function": ["def", "fill_graph_randomly(self,", "c=-1):"]}, {"Comment": ["#", "make", "only", "one", "source", "and", "one", "sink"], "Function": ["def", "_normalizeGraph(self,", "sources,", "sinks):"]}, {"Comment": ["#", "You", "should", "override", "it"], "Function": ["def", "_algorithm(self):"]}, {"Comment": ["#", "using", "dfs", "for", "finding", "eulerian", "path", "traversal"], "Function": ["def", "dfs(u,", "graph,", "visited_edge,", "path=[]):"]}, {"Comment": ["#", "for", "checking", "in", "graph", "has", "euler", "path", "or", "circuit"], "Function": ["def", "check_circuit_or_path(graph,", "max_node):"]}, {"Comment": ["#", "Finding", "Bridges", "in", "Undirected", "Graph"], "Function": ["def", "computeBridges(graph):"]}, {"Comment": ["#", "Finding", "longest", "distance", "in", "Directed", "Acyclic", "Graph", "using", "KahnsAlgorithm"], "Function": ["def", "longestDistance(graph):"]}, {"Comment": ["#", "Disjoint", "Set", "Node", "to", "store", "the", "parent", "and", "rank"], "Function": ["def", "__init__(self,", "key:", "int)", "->", "None:"]}, {"Comment": ["#", "Disjoint", "Set", "DataStructure"], "Function": ["def", "__init__(self):"]}, {"Comment": ["#", "Update", "function", "if", "value", "of", "any", "node", "in", "min-heap", "decreases"], "Function": ["def", "bottom_to_top(val,", "index,", "heap,", "position):"]}, {"Comment": ["#", "PRNG", "(Xorshift", "by", "George", "Marsaglia)"], "Function": ["def", "xorshift(X,", "Y):"]}, {"Comment": ["#", "Functions", "of", "binary", "conversion--------------------------------------"], "Function": ["def", "text_to_bits(text,", "encoding=\"utf-8\",", "errors=\"surrogatepass\"):"]}, {"Comment": ["#", "Functions", "of", "hamming", "code-------------------------------------------"], "Function": ["def", "emitterConverter(sizePar,", "data):"]}, {"Comment": ["#", "@staticmethod"], "Function": ["def", "expand_block(self,", "block):"]}, {"Comment": ["#", "Make", "a", "training", "dataset", "drawn", "from", "a", "gaussian", "distribution"], "Function": ["def", "gaussian_distribution(mean:", "float,", "std_dev:", "float,", "instance_count:", "int)", "->", "list:"]}, {"Comment": ["#", "Make", "corresponding", "Y", "flags", "to", "detecting", "classes"], "Function": ["def", "y_generator(class_count:", "int,", "instance_count:", "list)", "->", "list:"]}, {"Comment": ["#", "Calculate", "the", "class", "means"], "Function": ["def", "calculate_mean(instance_count:", "int,", "items:", "list)", "->", "float:"]}, {"Comment": ["#", "Calculate", "the", "class", "probabilities"], "Function": ["def", "calculate_probabilities(instance_count:", "int,", "total_count:", "int)", "->", "float:"]}, {"Comment": ["#", "Calculate", "the", "variance"], "Function": ["def", "calculate_variance(items:", "list,", "means:", "list,", "total_count:", "int)", "->", "float:"]}, {"Comment": ["#", "Making", "predictions"], "Function": ["def", "predict_y_values("]}, {"Comment": ["#", "Calculating", "Accuracy"], "Function": ["def", "accuracy(actual_y:", "list,", "predicted_y:", "list)", "->", "float:"]}, {"Comment": ["#", "Main", "Function"], "Function": ["def", "main():"]}, {"Comment": ["#", "here", "alpha", "is", "the", "learning", "rate,", "X", "is", "the", "feature", "matrix,y", "is", "the", "target", "matrix"], "Function": ["def", "logistic_reg(alpha,", "X,", "y,", "max_iterations=70000):"]}, {"Comment": ["#", "Visualizing", "the", "Polymonial", "Regression", "results"], "Function": ["def", "viz_polymonial():"]}, {"Comment": ["#", "Mean", "Absolute", "Error"], "Function": ["def", "mae(predict,", "actual):"]}, {"Comment": ["#", "Mean", "Squared", "Error"], "Function": ["def", "mse(predict,", "actual):"]}, {"Comment": ["#", "Root", "Mean", "Squared", "Error"], "Function": ["def", "rmse(predict,", "actual):"]}, {"Comment": ["#", "Root", "Mean", "Square", "Logarithmic", "Error"], "Function": ["def", "rmsle(predict,", "actual):"]}, {"Comment": ["#", "Mean", "Bias", "Deviation"], "Function": ["def", "mbd(predict,", "actual):"]}, {"Comment": ["#", "Calculate", "alphas", "using", "SMO", "algorithm"], "Function": ["def", "fit(self):"]}, {"Comment": ["#", "Predict", "test", "samles"], "Function": ["def", "predict(self,", "test_samples,", "classify=True):"]}, {"Comment": ["#", "Check", "if", "alpha", "violate", "KKT", "condition"], "Function": ["def", "_check_obey_kkt(self,", "index):"]}, {"Comment": ["#", "Get", "value", "calculated", "from", "kernel", "function"], "Function": ["def", "_k(self,", "i1,", "i2):"]}, {"Comment": ["#", "Get", "sample's", "error"], "Function": ["def", "_e(self,", "index):"]}, {"Comment": ["#", "Calculate", "Kernel", "matrix", "of", "all", "possible", "i1,i2", ",saving", "time"], "Function": ["def", "_calculate_k_matrix(self):"]}, {"Comment": ["#", "Predict", "test", "sample's", "tag"], "Function": ["def", "_predict(self,", "sample):"]}, {"Comment": ["#", "Choose", "alpha1", "and", "alpha2"], "Function": ["def", "_choose_alphas(self):"]}, {"Comment": ["#", "Get", "the", "new", "alpha2", "and", "new", "alpha1"], "Function": ["def", "_get_new_alpha(self,", "i1,", "i2,", "a1,", "a2,", "e1,", "e2,", "y1,", "y2):"]}, {"Comment": ["#", "Normalise", "data", "using", "min_max", "way"], "Function": ["def", "_norm(self,", "data):"]}, {"Comment": ["#", "different", "functions", "implementing", "different", "types", "of", "SVM's"], "Function": ["def", "NuSVC(train_x,", "train_y):"]}, {"Comment": ["#", "Eulers", "Totient", "function", "finds", "the", "number", "of", "relative", "primes", "of", "a", "number", "n", "from", "1", "to", "n"], "Function": ["def", "totient(n:", "int)", "->", "list:"]}, {"Comment": ["#", "Divide", "and", "Conquer", "algorithm"], "Function": ["def", "find_max(nums,", "left,", "right):"]}, {"Comment": ["#", "Divide", "and", "Conquer", "algorithm"], "Function": ["def", "find_min(nums,", "left,", "right):"]}, {"Comment": ["#", "Return", "true", "if", "2^p", "-", "1", "is", "prime"], "Function": ["def", "lucas_lehmer_test(p:", "int)", "->", "bool:"]}, {"Comment": ["#", "if", "it's", "not", "a", "prime,", "the", "chance", "of", "it", "returning", "true", "is", "at", "most", "1/4**prec"], "Function": ["def", "is_prime(n,", "prec=1000):"]}, {"Comment": ["#", "A", "local", "function", "to", "see", "if", "a", "dot", "lands", "in", "the", "circle."], "Function": ["def", "is_in_circle(x:", "float,", "y:", "float)", "->", "bool:"]}, {"Comment": ["#", "Discrete", "fourier", "transform", "of", "A", "and", "B"], "Function": ["def", "__DFT(self,", "which):"]}, {"Comment": ["#", "multiply", "the", "DFTs", "of", "A", "and", "B", "and", "find", "A*B"], "Function": ["def", "__multiply(self):"]}, {"Comment": ["#", "Overwrite", "__str__", "for", "print();", "Shows", "A,", "B", "and", "A*B"], "Function": ["def", "__str__(self):"]}, {"Comment": ["#", "DarkCoder"], "Function": ["def", "sum_of_series(first_term,", "common_diff,", "num_of_terms):"]}, {"Comment": ["class", "matrix:", "#", "Public", "class", "to", "implement", "a", "graph"], "Function": ["def", "__init__(self,", "row:", "int,", "col:", "int,", "graph:", "list):"]}, {"Comment": ["#", "MATRIX", "INFORMATION"], "Function": ["def", "columns(self):"]}, {"Comment": ["#", "MATRIX", "MANIPULATION"], "Function": ["def", "add_row(self,", "row,", "position=None):"]}, {"Comment": ["#", "MATRIX", "OPERATIONS"], "Function": ["def", "__eq__(self,", "other):"]}, {"Comment": ["#", "Make", "string", "and", "return"], "Function": ["def", "single_line(row_vector):"]}, {"Comment": ["#", "Function", "to", "print", "upper", "half", "of", "diamond", "(pyramid)"], "Function": ["def", "floyd(n):"]}, {"Comment": ["#", "Function", "to", "print", "lower", "half", "of", "diamond", "(pyramid)"], "Function": ["def", "reverse_floyd(n):"]}, {"Comment": ["#", "Function", "to", "print", "complete", "diamond", "pattern", "of", "\"*\""], "Function": ["def", "pretty_print(n):"]}, {"Comment": ["#", "i=", "how", "many", "letters", "or", "characters", "the", "password", "length", "will", "be"], "Function": ["def", "alternative_password_generator(ctbi,", "i):"]}, {"Comment": ["#", "Function", "called", "at", "each", "step", "of", "the", "animation"], "Function": ["def", "update(frame:", "int)", "->", "list[plt.Circle]:"]}, {"Comment": ["#", "This", "function", "is", "not", "part", "of", "the", "problem,", "I", "did", "it", "just", "for", "fun"], "Function": ["def", "hand_name(self)", "->", "str:"]}, {"Comment": ["#", "the", "builtin", "functions."], "Function": ["def", "__eq__(self,", "other):"]}, {"Comment": ["#", "small", "helper", "function", "for", "modular", "exponentiation"], "Function": ["def", "_modexpt(base:", "int,", "exponent:", "int,", "modulo_value:", "int)", "->", "int:"]}, {"Comment": ["#", "iteration", "version"], "Function": ["def", "pre_order_iter(node:", "TreeNode)", "->", "None:"]}, {"Comment": ["#", "iteration", "over", "the", "unsorted", "list"], "Function": ["def", "iter_merge_sort(input_list:", "list)", "->", "list:"]}, {"Comment": ["#", "creates", "a", "reverse", "sorted", "list", "and", "sorts", "it"], "Function": ["def", "main():"]}, {"Comment": ["#", "BST", "data", "structure"], "Function": ["def", "__init__(self,", "val):"]}, {"Comment": ["#", "Emission", "in", "the", "last", "half", "hour"], "Function": ["def", "fetch_last_half_hour()", "->", "str:"]}, {"Comment": ["#", "Emissions", "in", "a", "specific", "date", "range"], "Function": ["def", "fetch_from_to(start,", "end)", "->", "list:"]}, {"Comment": ["#", "Get", "main", "domain", "name", "(example.com)"], "Function": ["def", "get_domain_name(url:", "str)", "->", "str:"]}, {"Comment": ["#", "Get", "sub", "domain", "name", "(sub.example.com)"], "Function": ["def", "get_sub_domain_name(url:", "str)", "->", "str:"]}]}